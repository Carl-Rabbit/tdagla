!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.tdagla=e():t.tdagla=e()}(self,(()=>(()=>{"use strict";var t={d:(e,a)=>{for(var s in a)t.o(a,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:a[s]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{create:()=>x});class a{id;data;src;dst;constructor(t,e,s=null){this.id=a.getEdgeId(t,e),this.src=t,this.dst=e,this.data=s}static getEdgeId(t,e){return t.id+"-"+e.id}}function s(t,e){let a=t.indexOf(e);return-1!==a&&(t.splice(a,1),!0)}const d=function(t,e){let a=t[0];return t.forEach((t=>{e(t,a)>0&&(a=t)})),a};class i{id;data;outEdges=[];inEdges=[];constructor(t,e=null){this.id=t,this.data=e}}class n{nodes=[];nodeMap=new Map;edges=[];edgeMap=new Map;addNode(t,e=null){let a=new i(t,e);return this.nodes.push(a),this.nodeMap.set(t,a),a}removeNode(t){this.nodeMap.has(t.id)&&(s(this.nodes,t),this.nodeMap.delete(t.id),t.inEdges.concat(t.outEdges).forEach((t=>this.removeEdge(t))))}removeNodeById(t){let e=this.nodeMap.get(t);e&&this.removeNode(e)}addEdge(t,e,s=null){let d=this.nodeMap.get(t),i=this.nodeMap.get(e);if(void 0===d||void 0===i)return null;let n=new a(d,i,s);return d.outEdges.push(n),i.inEdges.push(n),this.edges.push(n),this.edgeMap.set(n.id,n),n}removeEdge(t){this.edgeMap.has(t.id)&&(s(this.edges,t),this.edgeMap.delete(t.id),s(t.src.outEdges,t),s(t.dst.inEdges,t))}removeEdgeById(t){let e=this.edgeMap.get(t);e&&this.removeEdge(e)}copy(){let t=new n;return this.nodes.forEach((e=>t.addNode(e.id,e.data))),this.edges.forEach((e=>t.addEdge(e.src.id,e.dst.id))),t}}class r{x0;x1;y;render;constructor(t,e,a,s){this.x0=t,this.x1=e,this.y=a,this.render=s}}class o{isHidden=!1;turningX=null}const h=function(t,e,a){if(t.has(e))return t.get(e);const s=a(e);return t.set(e,s),s};class g{rootId;graph;gap;visitedSet;constructor(t,e,a){this.rootId=t,this.graph=e,this.gap=a}solve(){this.computeHiddenEdgeSet(),this.reorderInAndOutEdges(),this.setLines()}computeHiddenEdgeSet(){const t=this.graph.nodes.filter((t=>t.outEdges.length>1));this.graph.edges.forEach((t=>t.data.isHidden=!1)),t.forEach((t=>{const e=t.outEdges.map((t=>t.dst));let a=null;e.every((t=>!t.data.render))?a=e[0]:e.forEach((t=>{t.data.render&&(null===a||a.data.x0>t.data.x0)&&(a=t)})),t.outEdges.forEach((t=>{t.dst!==a&&(t.data.isHidden=!0)}))}))}reorderInAndOutEdges(){const t=new Map;this.visitedSet=new Set;const e=a=>{if(this.visitedSet.has(a.id))return 1/0;this.visitedSet.add(a.id);let s=a.data.x0??1/0;return a.inEdges.filter((t=>!t.data.isHidden)).forEach((t=>{const a=e(t.src);s=Math.min(s,a)})),t.set(a.id,s),s};e(this.graph.nodeMap.get(this.rootId)),this.graph.nodes.forEach((e=>{e.inEdges.sort(((e,a)=>t.get(e.src.id)-t.get(a.src.id))),e.outEdges.sort(((e,a)=>t.get(e.src.id)-t.get(a.src.id)))}))}setLines(){this.visitedSet=new Set;const{lineMap:t}=this.layoutVertex(this.graph.nodeMap.get(this.rootId));for(const e of t.keys()){const a=t.get(e);this.graph.nodeMap.get(e).data.y=a}}layoutVertex(t){const e=new Map,s=new Map,i=t.inEdges.filter((t=>!t.data.isHidden)).map((t=>t.src));if(0===i.length)return t.data.render&&(e.set(t.id,0),h(s,0,(()=>[])).push(t)),{lineMap:e,blocksMap:s};let n=null,r=null,o=0;for(let t=0;t<i.length;++t){const a=i[t];if(this.visitedSet.has(a.id))continue;this.visitedSet.add(a.id);const{lineMap:d,blocksMap:g}=this.layoutVertex(a);if(0===d.size)continue;const l=Math.min(...d.values()),c=Math.max(...d.values());let u=o;if(null!==n){const t=e.get(n.id),i=d.get(a.id);let r=u,h=u;t:for(;;){--h;const e=t=>t-l+h,a=t=>t+l-h;if(e(i)<=t)break;for(let t=e(l);t<o;t++){const e=s.get(t)??[],d=g.get(a(t))??[];for(const t of e)for(const e of d){if(this.isOverlappedConsiderTurningX(t,e))break t;if(n===t&&e.data.turningX<t.data.x0)break t}}r=h}u=r}const p=t=>t-l+u;for(const[t,a]of d.entries()){const s=p(a);e.set(t,s)}for(const[t,e]of g.entries()){const a=p(t);h(s,a,(()=>[])).push(...e)}o=p(c)+1,n=a,r={lineMap:d,blocksMap:g}}if(t.data.render){const n=Math.max(...e.values());let r=1/0,o=-2,g=null;for(let a=-1;a<=n+1;++a){if(!(s.get(a)??[]).every((e=>!this.isOverlapped(e,t))))continue;const d=this.computeChildrenGroups(e,t,i,a);let n=0;d.forEach(((s,d)=>{if(0===s.length)return;const i=Math.max(...s.map((t=>t.data.x1)));s.forEach((t=>{n+=this.computeEdgeCost(t.data.x1,e.get(t.id),i+this.gap,a)})),1===d&&(n+=this.computeEdgeCost(i,a,t.data.x0,a))}));const h=i.reduce(((t,a)=>t+e.get(a.id)),0)/i.length;n+=Math.abs(h-a)*i.length*p,0!==d[0].length&&Math.min(...d[0].map((t=>t.data.x0)))>t.data.x0&&(n+=1/0),n<r&&(r=n,o=a,g=d)}if(-2===o&&console.error("layout error",this,t),-1===o){o=0;for(const[t,a]of e.entries())e.set(t,a+1);const t=new Map;s.forEach(((e,a)=>t.set(a,e))),s.clear(),t.forEach(((t,e)=>{s.set(e+1,t)}))}e.set(t.id,o),h(s,o,(()=>[])).push(t),g.forEach(((i,n)=>{let r;const h=Math.max(...i.map((t=>t.data.x1)));r=Math.min(h+this.gap/2,t.data.x1),i.forEach((i=>{const g=this.graph.edgeMap.get(a.getEdgeId(i,t));if(!g.data.isHidden)if(o===e.get(i.id))g.data.turningX=t.data.x0;else if(1===n){const a=[],n=e.get(i.id);for(let e=Math.min(n,o);e<=Math.max(n,o);++e){const i=s.get(e).filter((e=>e.data.x0<t.data.x0)),n=d(i,((t,e)=>t.data.x0-e.data.x0));n&&a.push(n)}let r=h;if(a.length>0){const e=a.map((e=>{const a=e.outEdges.find((t=>!t.data.isHidden));return a.data.turningX&&a.dst!==t?a.data.turningX:e.data.x1}));r=Math.max(...e)+this.gap/2}g.data.turningX=(r+t.data.x0)/2}else g.data.turningX=r}))}))}else{let d=null;for(const t of e.keys()){const e=this.graph.nodeMap.get(t);(null===d||e.data.x1>d.data.x1)&&(d=e)}if(null!==d){t.data.x0=t.data.x1=d.data.x1;const n=e.get(d.id);e.set(t.id,n),h(s,n,(()=>[])).push(t),i.forEach((e=>{this.graph.edgeMap.get(a.getEdgeId(e,t)).data.turningX=t.data.x0}))}}return{lineMap:e,blocksMap:s}}isOverlapped(t,e){const a=t.data.x0,s=t.data.x1+this.gap,d=e.data.x0,i=e.data.x1+this.gap;return!(s<d||a>i)}isOverlappedConsiderTurningX(t,e){let a=t.data.x0,s=t.data.x1+this.gap,d=e.data.x0,i=e.data.x1+this.gap;return t.outEdges.forEach((t=>{t.data.turningX&&s<t.data.turningX&&(s=t.data.turningX)})),e.outEdges.forEach((t=>{t.data.turningX&&i<t.data.turningX&&(i=t.data.turningX)})),!(s<d||a>i)}computeChildrenGroups(t,e,a,s){const d=a.filter((t=>this.isOverlapped(e,t))),i=d.filter((e=>t.get(e.id)<s)),n=i[i.length-1]??null,r=d.filter((e=>t.get(e.id)>s))[0]??null;let o=0,h=a.length;return null!==n&&(o=a.indexOf(n)+1),null!==r&&(h=a.indexOf(r)),[a.filter(((t,e)=>e<o)),a.filter(((t,e)=>o<=e&&e<h)),a.filter(((t,e)=>h<=e))]}computeEdgeCost(t,e,a,s){let d=0;return d+=Math.abs(t-a)/this.gap*l,d+=Math.abs(e-s)*(c+u*(e<=s?0:1)),d}}const l=1,c=1,u=.05,p=.04;class f{_graph;_gap=20;_lineHeight=10;_lineSpace=4;constructor(){this._graph=new n}setNode({id:t,x0:e,x1:a,render:s=!0}){const d=new r(e,a,0,s);return this._graph.addNode(t,d),this}setEdge({src:t,dst:e}){if(!this._graph.nodeMap.has(t))return console.error("tdagla: Can't find node "+t+". Ignored."),this;if(!this._graph.nodeMap.has(e))return console.error("tdagla: Can't find node "+e+". Ignored."),this;const a=new o;return this._graph.addEdge(t,e,a),this}getNode(t){const e=this._graph.nodeMap.get(t);return e?{id:e.id,x:e.data.x0,y:this._getYTop(e.data.y),x0:e.data.x0,x1:e.data.x1,width:e.data.x1-e.data.x0,height:this._lineHeight}:null}getNodes(){return this._graph.nodes.map((t=>this.getNode(t.id)))}getEdge(t,e){const s=this._graph.nodeMap.get(t),d=this._graph.nodeMap.get(e);if(!s||!d)return null;const i=this._graph.edgeMap.get(a.getEdgeId(s,d));if(!i)return null;const n=this._getEdgePoints(i);return{id:i.id,src:i.src.id,dst:i.dst.id,render:s.data.render&&d.data.render,points:n}}_getYTop(t){return t*(this._lineHeight+this._lineSpace)}_getYCenter(t){return t*(this._lineHeight+this._lineSpace)+this._lineHeight/2}_getEdgePoints(t){const e=t.src,a=t.dst;if(!e.data.render||!a.data.render)return[];const s=e.data.x1,d=a.data.x0,i=a.data.x0+this._gap,n=a.data.x1,r=this._getYCenter(e.data.y),o=this._getYCenter(a.data.y),h=o+this._getOffsetDstY(r,o);if(t.data.turningX===a.data.x0)return[[s,r],[d,o]];if(t.data.isHidden){if(s>=d&&i>=n){const t=(s+n)/2;return[[s,r],[t,r],[t,h],[n,h]]}if(s>=d){const t=s+this._gap/2;return[[s,r],[t,r],[t,h],[i,h]]}{const t=(s+d)/2;return[[s,r],[t,r],[t,o],[d,o]]}}const g=t.data.turningX;return g>=d&&g+this._gap/2>=n?[[s,r],[g,r],[g,h],[n,h]]:g>=d?[[s,r],[g,r],[g,h],[g+this._gap/2,h]]:[[s,r],[g,r],[g,o],[d,o]]}_getOffsetDstY(t,e){return(t<e?-1:1)*this._lineHeight/2}getEdges(){return this._graph.edges.map((t=>this.getEdge(t.src.id,t.dst.id)))}setGap(t){return this._gap=t,this}getGap(){return this._gap}setLineHeight(t){return this._lineHeight=t,this}getLineHeight(){return this._lineHeight}setLineSpace(t){return this._lineSpace=t,this}getLineSpace(){return this._lineSpace}layout(){if(0===this._graph.nodes.length)return;let t=this._graph.nodes[0];for(;0!==t.outEdges.length;)t=t.outEdges[0].dst;new g(t.id,this._graph,this._gap).solve()}}function x(){return new f}return e})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,